import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
// import { CallNumber } from '@ionic-native/call-number/ngx';
import { Storage } from '@ionic/storage';
import { NavController } from '@ionic/angular';
import { ThrowStmt } from '@angular/compiler';
import { StorageService } from 'src/app/services/storage.service';

@Component({
  selector: 'app-details',
  templateUrl: './details.page.html',
  styleUrls: ['./details.page.scss'],
})
export class DetailsPage implements OnInit {

  private readonly STATUS_UNCHECK = "ellipse-outline";
  private readonly STATUS_CHECK = "checkmark-outline";

  data: any;
  person: any;
  challenges: any;
  SampleJson: any;
  persons: any;

  countMissions: number;

  constructor(private route: ActivatedRoute, private storage: StorageService, private navCtrl: NavController) { 
    
  }

  ngOnInit() {
    this.SampleJson = [
      {
          "id": 1,
      "title": "Fazer uma receita",
          "description": "Que tal fazer uma video chamada e cozinhar juntos? üç≥ Coloque o telefone numa video chamada em um lugar fixo que continue filmando voc√™ e 'm√£os na massa'!",
          "icon": "fast-food",
        "status": "ellipse-outline"
    },
      {
          "id": 2,
      "title": "Encontre fotos",
          "description": "Crie um momento para procurar √°lbuns antigos e revisitar mem√≥rias! Conhecer a hist√≥ria das pessoas que gostamos √© sempre muito interessante.",
          "icon": "image",
        "status": "ellipse-outline"
    },
      {
          "id": 3,
      "title": "Mem√≥rias felizes",
          "description": "Nossas m√©morias nos fazem ser quem somos.‚ò∫Ô∏èüí≠ N√£o seria legal resgatar alguns desses momentos que nos deixam felizes?",
          "icon": "chatbubbles",
        "status": "ellipse-outline"
    },
      {
          "id": 4,
      "title": "M√∫sica da inf√¢ncia",
          "description": "Uma boa trilha sonora nos faz viajar no tempo e espa√ßo! Compartilhe uma can√ß√£o antiga para lembrar de pessoas, lugares e emo√ß√µes. üé∂üë®‚Äçüé§üíÉüèΩüï∫üèª",
          "icon": "musical-notes",
        "status": "ellipse-outline"
    },
      {
          "id": 5,
      "title": "Vejam o mesmo video",
          "description": "‚ñ∂ Compartilhe um v√≠deo do YouTube que achar interessante e conversem sobre ele. Qual o conte√∫do? O objetivo do v√≠deo? O que acharam mais legal ou question√°vel?",
          "icon": "play-circle",
        "status": "ellipse-outline"
    },
      {
          "id": 6,
      "title": "Recomendar medita√ß√£o",
          "description": "Meditar pode nos ajudar a passar por momentos dif√≠ceis e manter os pensamentos no lugar. üí≠Que tal recomendar um v√≠deo de medita√ß√£o e, ap√≥s a pr√°tica, conversar sobre as sensa√ß√µes experienciadas? üßò",
          "icon": "flower",
        "status": "ellipse-outline"
    },
      {
          "id": 7,
      "title": "Jogue 21 perguntas",
          "description": "Pense em um objeto e o seu contato ter√° at√© 21 perguntas para advinh√°-lo. Se a pessoa n√£o conseguir adivinhar em 21 perguntas, ela perde. E a√≠, quem ser√° o mais esperto? Esse jogo √© simples e pode ser jogado atrav√©s de uma liga√ß√£o üìû.",
          "icon": "flower",
        "status": "ellipse-outline"
    },
      {
          "id": 8,
      "title": "Jogo do ABC",
          "description": "Vamos testar a mem√≥ria com o jogo do ABC? Voc√™s devem pensar em uma palavra que comece com cada letra do alfabeto, come√ßando pela letra A. Cada pessoa deve repetir as palavras que j√° foram ditas antes de falar uma palavra nova.",
          "icon": "flower",
        "status": "ellipse-outline"
    },
      {
          "id": 9,
      "title": "Jogo de dama ou xadrez",
          "description": "Com um tabuleiro de damas ou xadrez, compartilhe as jogadas informando a posi√ß√£o inicial e final das jogadas e desfrutem de uma boa partida. Por exemplo: pe√£o da casa A1 realiza jogada para a cada A2. Bom jogo!",
          "icon": "flower",
        "status": "ellipse-outline"
    },
      {
          "id": 10,
      "title": "Compartilhar refei√ß√£o",
          "description": "Realize uma chamada com o idoso em um hor√°rio de refei√ß√£o, seja no caf√© da manh√£, no almo√ßo, no jantar ou mesmo em um intervalo de lanche. Falem sobre o sabor da comida, suas prefer√™ncia, como foi o preparo e coisas que fizeram durante o dia, e n√£o esque√ßa de brindar!",
          "icon": "fast-food",
        "status": "ellipse-outline"
    },
      {
          "id": 11,
      "title": "Jogo do dicion√°rio",
          "description": "üìï Essse jogo √© bem simples e exige apenas um dicion√°rio. Para jogar, uma pessoa deve abrir o dicion√°rio em uma p√°gina aleat√≥ria e a outra tem que tentar adivinhar qual o significado da palavra.",
          "icon": "book",
        "status": "ellipse-outline"
    },
      {
          "id": 12,
      "title": "Jogue Adedonha",
          "description": "Nessa brincadeira, a ideia √© sortear uma letra e dizer o maximo de nomes de lugares (cidades, estados e pa√≠ses) come√ßando com essa letra. Aposto que voc√™ est√° com medo perder essa! üòÅ",
          "icon": "flower",
        "status": "ellipse-outline"
    },
      {
          "id": 13,
      "title": "Conversar sobre s√©ries",
          "description": "Indica√ß√µes de s√©ries s√£o sempre bem vindas. Que tal contar um pouco sobre a √∫ltima s√©rie que voc√™ viu e pedir indica√ß√µes para essa pessoa?",
          "icon": "chatbubbles",
        "status": "ellipse-outline"
    },
      {
          "id": 14,
      "title": "D√™ uma de filosofo",
          "description": "J√° ouviu falar de nova acropole? ü§ì üßê √â uma institui√ß√£o internacional com sedes em diversos paises onde professores volunt√°rios ensinam e discutem a fisolofia aplicada na pr√°tica do dia-a-dia. Tem no Spotify e Youtube! Busque por: 'Justi√ßa Nova acropole' no google ou spotify.",
          "icon": "chatbubbles",
        "status": "ellipse-outline"
    },
      {
          "id": 15,
      "title": "Pe√ßa um conselho",
          "description": "Converse e discuta com o idoso sobre algo que queira compartilhar e solicitar conselho, escute sobre a opini√£o do idoso em rela√ß√£o a um problema que esteja enfrentando no momento, afinal de contas a experi√™ncia conta muito!",
          "icon": "chatbubbles",
        "status": "ellipse-outline"
    },
      {
          "id": 16,
      "title": "Chamada em grupo",
          "description": "Encoraje o seu contato a te apresentar para um amigo de longa data. Al√©m de ter uma conversa boa, a pessoa poder√° ter contato com algu√©m de realidade parecida.",
          "icon": "call",
        "status": "ellipse-outline"
    },
      {
          "id": 17,
      "title": "Compre mantimentos",
          "description": "Entre em contato com o idoso e pergunte se ele est√° precisando de um rem√©dio ou comida, em caso positivo providencie o item desejado e fa√ßa a entrega ao idoso, ele ficar√° muito contente em saber que pode contar com voc√™!",
          "icon": "medkit",
        "status": "ellipse-outline"
    },
      {
          "id": 18,
      "title": "Ler um livro juntos",
          "description": "Escolha um livro de interesse e compartilhem sua leitura, ou em conjunto ou discutindo sobre os cap√≠tulos j√° lidos, e criem suposi√ß√µes do que est√° pela frente. O que ser√° que acontece no final?",
          "icon": "book",
        "status": "ellipse-outline"
    },
      {
          "id": 19,
      "title": "Palavra cruzada",
          "description": "Voc√™ pode achar um jogo online de palavras cruzadas e preencher juntos por telefone.",
          "icon": "flower",
        "status": "ellipse-outline"
    },
      {
          "id": 20,
      "title": "Contar hist√≥rias",
          "description": "Escreva v√°rios temas em pap√©is pequenos e depois fa√ßa um sorteio. Se o tema sorteado for carnaval, por exemplo, voc√™ deve e a pessoa devem contar alguma hist√≥ria divertida de carnaval. √â uma boa forma de compartilhar aquelas hist√≥rias engra√ßadas que amamos contar.",
          "icon": "chatbubbles",
        "status": "ellipse-outline"
    },
      {
          "id": 21,
      "title": "Ensinar receita",
          "description": "Que tal aprender uma receita? Pe√ßa para o seu contato te ensinar uma receita e, al√©m de trocar uma ideia, voc√™ pode comer algo gostoso depois.",
          "icon": "fast-food",
        "status": "ellipse-outline"
    },
      {
          "id": 22,
      "title": "Regar plantas",
          "description": "Converse sobre plantas enquanto as rega. Al√©m de um bom papo, as suas plantinhas agradecem. üå±",
          "icon": "leaf",
        "status": "ellipse-outline"
    },
      {
          "id": 23,
      "title": "Brincar de forca",
          "description": "Brinquem de forca, estabele√ßa um tema, e escolha uma palavra, informe o n√∫mero de letras, e tentem adivinhar qual a palavra informando letras, o jogador tem 6 tentativas que simbolizam as parte do corpo de um personagem na forca: cabe√ßa, tronco, e membros",
          "icon": "flower",
        "status": "ellipse-outline"
    },
      {
          "id": 24,
      "title": "Quem sou eu?",
          "description": "Escolha um personagem famoso e descreva suas caracter√≠sticas f√≠sicas e sociais. O seu contato deve adivinhar quem √© o personagem.",
          "icon": "help",
        "status": "ellipse-outline"
    },
      {
          "id": 25,
      "title": "Fazer atividade f√≠sica",
          "description": "Iniciem uma chamada em v√≠deo e compartilhem uma atividade f√≠sica simples ou alongamento com o idoso, respeitando suas limita√ß√µes f√≠sicas",
          "icon": "barbell",
        "status": "ellipse-outline"
    },
      {
          "id": 26,
      "title": "Hora da arte",
          "description": "Iniciem uma chamada de v√≠deo e orientem como fazer algumas atividades artesanais. Costura, Croch√™, flores, origami...",
          "icon": "flower",
        "status": "ellipse-outline"
    },
      {
          "id": 27,
      "title": "Estimule a leitura",
          "description": "Leia um poema ou texto interessante para o seu contato e pe√ßa para ele(a) fazer o mesmo!",
          "icon": "book",
        "status": "ellipse-outline"
    },
      {
          "id": 28,
      "title": "Relembrar √© viver",
          "description": "Estimule o idosos a contar um pouco das suas hist√≥rias de vida",
          "icon": "chatbubbles",
        "status": "ellipse-outline"
    },
      {
          "id": 29,
      "title": "Sorria üì∏",
          "description": "Tire uma foto legal do seu dia e compartilhe com quem voc√™ gosta",
          "icon": "camera",
        "status": "ellipse-outline"
    },
      {
          "id": 30,
      "title": "Cuidar do jardim",
          "description": "Lembre o seu contato de cuidar das plantinhas! üåø Essa atividade requer aten√ß√£o e pode ajudar no combate √† ansiedade.",
          "icon": "leaf",
        "status": "ellipse-outline"
    },
      {
          "id": 31,
      "title": "D√™ boas not√≠cias üóû,Tranquilize o seu contato em rela√ß√£o √† pandemia.", 
          "description": "Procure nos jornais uma boa not√≠cia recente sobre o COVID-19 e compartilhe com ele(a) em tom otimista.",
          "icon": "newspaper",
        "status": "ellipse-outline"
      }
  ];
    this.person = null;
    if (this.route.snapshot.data['special']) {
      this.data = this.route.snapshot.data['special'];
      this.storage.getPersons().then((val) => {
        this.persons = val;
        if (val === null) {
        } else {
          let index = 0;
          for (let i = 0; i < this.persons.length; i++) {
            if (this.persons[i].id == this.data) {
              this.person = this.persons[i];
              index = i;
            }
          }
         
          if (this.person.challenges === undefined || this.person.challenges === null) {
            this.challenges = [this.SampleJson[Math.floor((Math.random() * this.SampleJson.length) + 0)],
            this.SampleJson[Math.floor((Math.random() * this.SampleJson.length) + 0)],
            this.SampleJson[Math.floor((Math.random() * this.SampleJson.length) + 0)]];
            this.person.challenges = this.challenges;
            this.persons[index] = this.person;
            this.storage.setPersons(this.persons);
          }
        }
        this.updateCountMissions();
      });
    }

  }

  getThreeChallenges() {
    return [this.SampleJson[Math.floor((Math.random() * this.SampleJson.length) + 0)],
    this.SampleJson[Math.floor((Math.random() * this.SampleJson.length) + 0)],
    this.SampleJson[Math.floor((Math.random() * this.SampleJson.length) + 0)]];
  }

  shuffle(array) {
    let currentIndex = array.length, temporaryValue, randomIndex;
  
    // While there remain elements to shuffle...
    while (0 !== currentIndex) {
  
      // Pick a remaining element...
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
  
      // And swap it with the current element.
      temporaryValue = array[currentIndex];
      array[currentIndex] = array[randomIndex];
      array[randomIndex] = temporaryValue;
    }
  
    return array;
  }

  moreChallenges() {
    let count = 3
    let j = 0;
    while (j < count) {
      let newChallenge = this.SampleJson[Math.floor((Math.random() * this.SampleJson.length) + 0)];
      let notFound = true;
      for (let i = 0; i < this.person.challenges.length; i++) {
        if (this.person.challenges[i].id == newChallenge.id) {
          notFound = false;
        }
      }
      if (notFound) {
        this.person.challenges.push(newChallenge);
        j++;
      }
      if (this.person.challenges.length === this.SampleJson.length) {
        break;
      }
    }
    this.person.challenges = this.shuffle(this.person.challenges);
    for (let i = 0; i < this.persons.length; i++) {
      if (this.persons[i].id == this.person.id) {
        this.persons[i] = this.person;
        this.storage.setPersons(this.persons);
      }
    }
    
  }

  

  call() {
    console.log("TODO");
    // this.callNumber.callNumber(this.person.phone, true)
    // .then(res => console.log('Launched dialer!', res))
    // .catch(err => console.log('Error launching dialer', err));
  }

  updatePerson(id) {
    for (let i = 0; i < this.persons.length; i++) {
      if (this.persons[i].id == id) {
        console.log("found id " + i)
        this.persons.splice(i, 1);
      }
    }
    this.storage.setPersons(this.persons);

    this.navCtrl.setDirection("back");
    this.navCtrl.navigateForward('home');
  }

  editPerson(id) {
    this.navCtrl.setDirection('forward');
    this.navCtrl.navigateForward('details/'+ id +'/edit')
  }

  changeStatus(challenge) {
    for (let i = 0; i < this.person.challenges.length; i++) {
      if (this.person.challenges[i].id === challenge.id) {
        if (challenge.status == this.STATUS_CHECK) {
          this.person.challenges[i].status = this.STATUS_UNCHECK;

        } else {
          this.person.challenges[i].status = this.STATUS_CHECK;
        }
      }
    }
    for (let i = 0; i < this.persons.length; i++) {
      if (this.persons[i].id == this.person.id) {
        this.persons[i] = this.person;
      }
    }

    this.updateCountMissions();

    this.storage.setPersons(this.persons);
  }

  private updateCountMissions() {
    this.countMissions = this.person.challenges.filter(c => c.status === this.STATUS_CHECK).length;
  }
}
